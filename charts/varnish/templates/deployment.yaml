apiVersion: apps/v1
kind: Deployment
metadata:
  name: customvarnish-cache
  labels:
    helm.sh/chart: varnish-cache-0.1.0
    app.kubernetes.io/name: varnish-cache
    app.kubernetes.io/instance: custom
    app.kubernetes.io/version: "7.4.2"
    app.kubernetes.io/managed-by: Helm      
spec:
  replicas: 1  
  selector:
    matchLabels:
      app.kubernetes.io/name: varnish-cache
      app.kubernetes.io/instance: custom
  template:
    metadata:      
      labels:
        app.kubernetes.io/name: varnish-cache
        app.kubernetes.io/instance: custom      
      annotations:
        checksum/customvcl: 7b15612fd2d2d03fe720b9c01929cd5ea1114dc8c153a2951f75e904599187f2
    spec:            
      serviceAccountName: customvarnish-cache      
      securityContext:
        fsGroup: 999
      shareProcessNamespace: false
      containers:        
        - name: varnish-cache
          securityContext:
            runAsNonRoot: true
            runAsUser: 1002
          
          image: "docker.io/varnish:7.4.2"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 6081
              protocol: TCP
          
          livenessProbe:
            tcpSocket:
              port: 6081
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            tcpSocket:
              port: 6081
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          command:
            - /usr/sbin/varnishd
            - -F
            - -a
            - http=$(VARNISH_HTTP_ADDRESS):6081,HTTP
            - -f
            - /etc/varnish/default.vcl
            - -T
            - 127.0.0.1:6082
            - -t
            - "120"
            - -p
            - thread_pool_min=50
            - -p
            - thread_pool_max=1000
            - -p
            - thread_pool_timeout=120
          env:
            - name: VARNISH_HTTP_ADDRESS
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          volumeMounts:
            - name: customconfig
              mountPath: /etc/varnish
            - name: customconfig-vcl
              mountPath: "/etc/varnish/default.vcl"
              subPath: default.vcl
            - name: customvarnish-vsm
              mountPath: /var/lib/varnish        
        - name: varnish-cache-ncsa
          securityContext:
            runAsNonRoot: true
            runAsUser: 1002
          
          image: "docker.io/varnish:7.4.2"
          imagePullPolicy: IfNotPresent
          command: ["varnishncsa"]
          args:
            - -c
          readinessProbe:
            exec:
              command:
                - /usr/bin/varnishncsa
                - -d
                - -t 3
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          livenessProbe:
            exec:
              command:
                - /usr/bin/varnishncsa
                - -d
                - -t 3
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          volumeMounts:
          - name: customvarnish-vsm
            mountPath: /var/lib/varnish                    
      volumes:
      - name: customconfig
        emptyDir:
          medium: "Memory"
      - name: customconfig-vcl
        configMap:
          name: customvarnish-cache-vcl
      - name: customvarnish-vsm
        emptyDir:
          medium: "Memory"            
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/name: varnish-cache
                  app.kubernetes.io/instance: custom
              topologyKey: kubernetes.io/hostname
