apiVersion: apps/v1
kind: Deployment
metadata:
  name: custom-varnish-cache
  labels:
    helm.sh/chart: varnish-cache-0.1.0
    app.kubernetes.io/name: varnish-cache
    app.kubernetes.io/instance: custom
    app.kubernetes.io/version: "7.4.2"
    app.kubernetes.io/managed-by: Helm      
spec:
  replicas: 1  
  selector:
    matchLabels:
      app.kubernetes.io/name: varnish-cache
      app.kubernetes.io/instance: custom
  template:
    metadata:      
      labels:
        app.kubernetes.io/name: varnish-cache
        app.kubernetes.io/instance: custom
    spec:            
      serviceAccountName: custom-varnish-cache      
      securityContext:
        fsGroup: 101
      shareProcessNamespace: true
      initContainers:
      - name: init-script
        image: alpine:latest
        securityContext:
          runAsNonRoot: true
          runAsUser: 103
        command: ['sh', '-c', 'touch /var/log/varnish/varnishncsa-frontend.log /var/log/varnish/varnishncsa-backend.log && chmod 666 /var/log/varnish/*.log']
        volumeMounts:
        - name: varnish-log
          mountPath: /var/log/varnish
      containers:      
        - name: nginx
          image: {{ .Values.nginxImage }}
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/conf.d/default.conf
              subPath: default.conf
            - name: varnish-secret
              mountPath: /etc/varnish/secret
              subPath: secret
        - name: varnish-cache
          securityContext:
            runAsNonRoot: true
            runAsUser: 103
          image: {{ .Values.varnishImage }}
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 6081
              protocol: TCP
          env:
            - name: VARNISH_HTTP_ADDRESS
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          volumeMounts:
            - name: varnish-secret
              mountPath: /etc/varnish/secret
              subPath: secret
            - name: custom-config
              mountPath: /etc/varnish
            - name: custom-config-vcl
              mountPath: "/etc/varnish/default.vcl"
              subPath: default.vcl
            - name: custom-varnish-vsm
              mountPath: /var/lib/varnish
            - name: varnish-log
              mountPath: /var/log/varnish
        - name: exporter
          command:
            - "/prometheus_varnish_exporter"
          image: {{ .Values.exporterImage }}
          volumeMounts:
            - name: custom-varnish-vsm
              mountPath: /var/lib/varnish
              readOnly: true
            - name: varnish-secret
              mountPath: /etc/varnish/secret
              subPath: secret
          ports:
          - containerPort: 9131
            name: prometheus
        - name: varnish-cache-ncsa-frontend
          securityContext:
            runAsNonRoot: true
            runAsUser: 103
          image: {{ .Values.varnishImage }}
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh", "-c"]
          args: ["varnishncsa -n /var/lib/varnish -F '{\"Timestamp\": \"%t\", \"Varnish-Side\": \"%{Varnish:side}x\", \"Age\": %{age}o, \"Handling\": \"%{Varnish:handling}x\", \"Request\": \"%r\", \"Status\": \"%s\", \"Response-Reason\": \"%{VSL:RespReason}x\", \"Fetch-Error\": \"%{VSL:FetchError}x\", \"X-Forwarded-For\": \"%{x-forwarded-for}i\", \"Remote-User\": \"%u\", \"Bytes\": \"%b\", \"Time-To-Serve\": %D, \"User-Agent\": \"%{User-agent}i\", \"Referer\": \"%{Referer}i\", \"X-Varnish\": \"%{x-varnish}o\", \"X-Magento-Tags\": \"%{x-magento-tags}o\"}' -w /var/log/varnish/varnishncsa-frontend.log"]
          volumeMounts:
          - name: custom-varnish-vsm
            mountPath: /var/lib/varnish
            readOnly: true
          - name: varnish-secret
            mountPath: /etc/varnish/secret
            subPath: secret
          - name: varnish-log
            mountPath: /var/log/varnish
        - name: varnish-cache-ncsa-backend
          securityContext:
            runAsNonRoot: true
            runAsUser: 103
          image: {{ .Values.varnishImage }}
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh", "-c"]
          args: ["varnishncsa -n /var/lib/varnish -b -F '{\"Timestamp\": \"%t\", \"Varnish-Side\": \"%{Varnish:side}x\", \"Handling\": \"%{Varnish:handling}x\", \"Request\": \"%r\", \"Status\": \"%s\", \"Response-Reason\": \"%{VSL:RespReason}x\", \"Fetch-Error\": \"%{VSL:FetchError}x\", \"Bytes\": \"%b\", \"Time-To-Serve\": %D}' -w /var/log/varnish/varnishncsa-backend.log"]
          volumeMounts:
          - name: custom-varnish-vsm
            mountPath: /var/lib/varnish
            readOnly: true
          - name: varnish-secret
            mountPath: /etc/varnish/secret
            subPath: secret
          - name: varnish-log
            mountPath: /var/log/varnish
        - name: alloy-varnish-logs
          image: grafana/alloy:latest
          volumeMounts:
          - name: varnish-log
            mountPath: /var/log/varnish
          - name: alloy-varnish-log-config
            mountPath: /etc/alloy/config.alloy
            subPath: config.alloy
      volumes:
      - name: custom-config
        emptyDir:
          medium: "Memory"
      - name: custom-config-vcl
        configMap:
          name: custom-varnish-cache-vcl
      - name: custom-varnish-vsm
        emptyDir:
          medium: "Memory"
      - name: varnish-secret
        configMap:
          name: varnish-secret
      - name: nginx-config
        configMap:
          name: nginx-config
      - name: varnish-log
        emptyDir: {}
      - name: alloy-varnish-log-config
        configMap:
          name: alloy-varnish-log-config
          items:
          - key: config.alloy
            path: config.alloy
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app.kubernetes.io/name: varnish-cache
                  app.kubernetes.io/instance: custom
              topologyKey: kubernetes.io/hostname
